generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  superadmin
  user
}

model Admin {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String   @unique
  email     String  @unique
  role Role @default(admin) 
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model User {
  id        String   @id @default(uuid())
  phone     String   @unique
  fullName      String
  email     String
  password  String
  role Role @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders  Order[]
  reviews Review[]

  @@map("users")
}

model Category {
  id          String @id @default(uuid())
  name        String
  description String?
  isDeleted   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subCategories SubCategory[]
  products      Product[]

  @@map("categories")
}

model SubCategory {
  id          String @id @default(uuid())
  name        String
  description String?
  categoryId  String
  isDeleted   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category  @relation(fields: [categoryId], references: [id])
  products Product[]

  @@map("sub_categories")
}

model Product {
  id            String  @id @default(uuid())
  name          String
  description   String
  price         Decimal @db.Decimal(10, 2)
  stockQuantity Int
  soldCount     Int     @default(0)
  images        String[]
  categoryId    String
  subCategoryId String?
  isDeleted     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category    Category     @relation(fields: [categoryId], references: [id])
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  customerName    String
  customerPhone   String
  deliveryAddress String
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt
  comment   String
  response  String?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Advertisement {
  id          String   @id @default(uuid())
  title       String
  content     String
  imageUrl    String?
  videoUrl    String?
  startDate   DateTime
  endDate     DateTime
  viewCount   Int      @default(0)
  clickCount  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("advertisements")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERING
  DELIVERED
  CANCELLED
}
